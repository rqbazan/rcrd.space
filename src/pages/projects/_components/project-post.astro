---
import kebabCase from "just-kebab-case";
import AnchorIcon from "~/ui/components/anchor-icon.astro";
import { dateDiffInDays } from "~/utils/date-diff-in-days";
import NewTag from "./new-tag.astro";
import TechTag from "./tech-tag.astro";

interface Props {
  projectName: string;
  postedAt?: string;
  techs: string[];
  class?: string;
  links?: Array<{
    href: string;
    // biome-ignore lint/suspicious/noExplicitAny: <explanation>
    icon: any;
    [key: string]: unknown;
  }>;
}

const { projectName, postedAt, techs, links, class: className } = Astro.props;

const MAX_DAYS_TO_BE_NEW = 30;

function isNew(postedAt?: string) {
  if (!postedAt) {
    return false;
  }

  const diffInDays = dateDiffInDays(new Date(postedAt));

  return diffInDays <= MAX_DAYS_TO_BE_NEW;
}

const htmlId = kebabCase(projectName.toLowerCase());
---

<div class={className} id={htmlId}>
  <div class="flex flex-col">
    <a href={`#${htmlId}`}>
      <div class="flex items-center cursor-pointer self-start">
        <h5 class="h5">{projectName}</h5>
        {isNew(postedAt) && <NewTag class="ml-1 -mt-2" />}
      </div>
    </a>
    <p class="p mt-4">
      <slot />
    </p>
  </div>
  <div class="flex mt-4">
    <div class="flex mr-1 flex-wrap -m-1">
      {
        Array.from(techs)
          .sort()
          .map((tech) => <TechTag text={tech} class="m-1" />)
      }
    </div>
    {
      Number(links?.length) > 0 && (
        <div class="flex space-x-3 ml-auto items-start">
          {links?.map(({ href, icon, ...rest }) => (
            <AnchorIcon href={href} {...rest}>
              <icon customClasses="h-5 w-5" />
            </AnchorIcon>
          ))}
        </div>
      )
    }
  </div>
</div>
